{
  "swagger": "2.0",
  "info": {
    "title": "CEDAR Resource Server API",
    "description": "Better Metadata - Better Science",
    "version": "2.5.2"
  },
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "name": "Authorization",
      "description": "Your CEDAR API key, using the format 'apiKey &lt;yourApiKey&gt;'",
      "in": "header"
    }
  },
  "responses": {
    "ok": {
      "description": "Successful operation"
    },
    "ok_folder": {
      "description": "A folder",
      "schema": {
        "type": "object",
        "items": {
          "$ref": "#/definitions/Folder"
        }
      }
    },
    "ok_template_field": {
      "description": "A template field",
      "schema": {
        "type": "object",
        "items": {
          "$ref": "#/definitions/TemplateField"
        }
      }
    },
    "ok_template_element": {
      "description": "A template element",
      "schema": {
        "type": "object",
        "items": {
          "$ref": "#/definitions/TemplateElement"
        }
      }
    },
    "ok_template_instance": {
      "description": "A template instance",
      "schema": {
        "type": "object",
        "items": {
          "$ref": "#/definitions/TemplateInstance"
        }
      }
    },
    "ok_template": {
      "description": "A template",
      "schema": {
        "type": "object",
        "items": {
          "$ref": "#/definitions/Template"
        }
      }
    },
    "created_folder": {
      "description": "A folder",
      "schema": {
        "type": "object",
        "items": {
          "$ref": "#/definitions/Folder"
        }
      }
    },
    "created_template_field": {
      "description": "A template field",
      "schema": {
        "type": "object",
        "items": {
          "$ref": "#/definitions/TemplateField"
        }
      }
    },
    "created_template_element": {
      "description": "A template element",
      "schema": {
        "type": "object",
        "items": {
          "$ref": "#/definitions/TemplateElement"
        }
      }
    },
    "created_template_instance": {
      "description": "A template instance",
      "schema": {
        "type": "object",
        "items": {
          "$ref": "#/definitions/TemplateInstance"
        }
      }
    },
    "created_template": {
      "description": "A template",
      "schema": {
        "type": "object",
        "items": {
          "$ref": "#/definitions/Template"
        }
      }
    },
    "no_content": {
      "description": "Successful operation (no content)"
    },
    "bad_request": {
      "description": "Bad request"
    },
    "unauthorized": {
      "description": "Unauthorized"
    },
    "forbidden": {
      "description": "Forbidden"
    },
    "not_found": {
      "description": "Not found"
    },
    "internal_error": {
      "description": "Internal server error"
    }
  },
  "parameters": {
    "folder_id": {
      "name": "folder_id",
      "in": "path",
      "description": "Folder identifier. Example&#58; https://repo.metadatacenter.org/folders/8bc64ab5-df6b-48c8-8c61-6c016245918e",
      "type": "string",
      "required": true
    },
    "qs_folder_id": {
      "name": "folder_id",
      "in": "query",
      "description": "Folder identifier. Example&#58; https://repo.metadatacenter.org/folders/8bc64ab5-df6b-48c8-8c61-6c016245918e. The artifact will be created in this folder. The user must have write access to the folder. If not provided, the artifact will be created in the user's home folder.",
      "type": "string"
    },
    "resource_types": {
      "name": "resource_types",
      "in": "query",
      "description": "Resource types as comma separated values.\nThe allowed values are: 'folder', 'field', 'element', 'template', 'instance'\n",
      "type": "string"
    },
    "resource_type": {
      "name": "resource_type",
      "in": "query",
      "description": "The type of CEDAR resource.\nThe allowed values are: 'field', 'element', 'template', 'instance'\n",
      "type": "string",
      "required": true
    },
    "sort": {
      "name": "sort",
      "in": "query",
      "description": "Sort field names as comma separated values.\nPrepending a field with '-' means descending order on that field.\nThe allowed values are: 'name', 'lastUpdatedOnTS', 'createdOnTS'\n",
      "type": "string",
      "required": false,
      "default": "name"
    },
    "limit": {
      "name": "limit",
      "in": "query",
      "description": "Paging limit",
      "type": "integer",
      "required": false,
      "default": 100,
      "minimum": 0,
      "maximum": 500
    },
    "offset": {
      "name": "offset",
      "in": "query",
      "description": "Paging offset",
      "type": "number",
      "required": false,
      "default": 0,
      "minimum": 0
    },
    "template_field_id": {
      "name": "template_field_id",
      "in": "path",
      "description": "Template Field identifier. Example&#58; https://repo.metadatacenter.org/template-fields/8bc64ab5-df6b-48c8-8c61-6c016245918e",
      "type": "string",
      "required": true
    },
    "template_element_id": {
      "name": "template_element_id",
      "in": "path",
      "description": "Template Element identifier. Example&#58; https://repo.metadatacenter.org/templates/8bc64ab5-df6b-48c8-8c61-6c016245918e",
      "type": "string",
      "required": true
    },
    "template_instance_id": {
      "name": "template_instance_id",
      "in": "path",
      "description": "Template Instance identifier. Example&#58; https://repo.metadatacenter.org/template-elements/8bc64ab5-df6b-48c8-8c61-6c016245918e",
      "type": "string",
      "required": true
    },
    "template_id": {
      "name": "template_id",
      "in": "path",
      "description": "Template identifier. Example&#58; https://repo.metadatacenter.org/templates/8bc64ab5-df6b-48c8-8c61-6c016245918e",
      "type": "string",
      "required": true
    },
    "q": {
      "name": "q",
      "in": "query",
      "description": "Search term. It will be looked up in the artifact names",
      "type": "string",
      "required": false
    },
    "is_based_on": {
      "name": "is_based_on",
      "in": "query",
      "description": "Template identifier. Example&#58; https://repo.metadatacenter.org/templates/8bc64ab5-df6b-48c8-8c61-6c016245918e\nAll the instances with this template id will be returned\n",
      "type": "string",
      "required": false
    },
    "sharing": {
      "name": "sharing",
      "in": "query",
      "description": "Sharing modifier for the search.\nOnly the artifacts and folder matching the criteria will be returned.\n",
      "type": "string",
      "enum": [
        "shared-with-me",
        "shared-with-everybody",
        null
      ],
      "required": false,
      "default": null
    },
    "format": {
      "name": "format",
      "in": "query",
      "description": "Output format type to display the content of the template instance.\nThe allowed values are: 'jsonld', 'json', 'rdf-nquad'\n",
      "type": "string",
      "enum": [
        "jsonld",
        "json",
        "rdf-nquad"
      ],
      "required": false,
      "default": "jsonld"
    },
    "version": {
      "name": "version",
      "in": "query",
      "description": "Version selector. It is only handled for template-fields, template-elements and templates.\nThe allowed values are: 'latest', 'all'\n",
      "type": "string",
      "enum": [
        "latest",
        "all"
      ],
      "required": false,
      "default": "all"
    },
    "publication_status": {
      "name": "publication_status",
      "in": "query",
      "description": "Publication status selector. It is only handled for template-fields, template-elements and templates.\nThe allowed values are: 'bibo:draft', 'bibo:published', 'all'\n",
      "type": "string",
      "enum": [
        "bibo:draft",
        "bibo:published",
        "all"
      ],
      "required": false,
      "default": "all"
    },
    "id": {
      "name": "id",
      "in": "query",
      "description": "Artifact id. If passed, only the artifact or folder with the given id will be returned.\n",
      "type": "string",
      "required": false,
      "default": null
    },
    "mode": {
      "name": "mode",
      "in": "query",
      "description": "Search mode. The only value currently supported is 'special-folders'. If passed, the list of special folders will be returned ('/Shared', etc.)\n",
      "type": "string",
      "enum": [
        "special-folders",
        null
      ],
      "required": false,
      "default": null
    },
    "category_id": {
      "name": "category_id",
      "in": "query",
      "description": "Category Id. All the artifacts in the given category will be returned.\n",
      "type": "string",
      "required": false,
      "default": null
    },
    "field_names": {
      "name": "field_names",
      "in": "query",
      "description": "Field name list, separated by comma.\n",
      "type": "string",
      "required": false,
      "default": null
    }
  },
  "paths": {
    "/users": {
      "get": {
        "summary": "Users",
        "description": "The Users endpoint returns information about the users of the system.\n",
        "tags": [
          "Users"
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "responses": {
          "200": {
            "description": "An array of users",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        }
      }
    },
    "/folders/{folder_id}": {
      "get": {
        "summary": "Get a folder",
        "description": "Get a folder.\n",
        "tags": [
          "Folders"
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/folder_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok_folder"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        }
      },
      "put": {
        "summary": "Update a folder",
        "description": "Update a folder.\n",
        "tags": [
          "Folders"
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/folder_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok_folder"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        }
      },
      "delete": {
        "summary": "Delete a folder",
        "description": "Delete a folder.\n",
        "tags": [
          "Folders"
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/folder_id"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/no_content"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        }
      }
    },
    "/folders": {
      "post": {
        "summary": "Create a folder",
        "description": "Create a folder.\n",
        "tags": [
          "Folders"
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "name": "folder",
            "in": "body",
            "description": "The folder to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Folder"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/created_folder"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        }
      }
    },
    "/folders/{folder_id}/permissions": {
      "get": {
        "summary": "Get permissions of a folder",
        "description": "Get permissions of a folder.\n",
        "tags": [
          "Folders",
          "Permissions"
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/folder_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        }
      },
      "put": {
        "summary": "Update permissions of a folder",
        "description": "Update permissions of a folder.\n",
        "tags": [
          "Folders",
          "Permissions"
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/folder_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        }
      }
    },
    "/folders/{folder_id}/details": {
      "get": {
        "summary": "Get the details of a folder",
        "description": "Get the details of a folder.\n",
        "tags": [
          "Folders"
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/folder_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        }
      }
    },
    "/folders/{folder_id}/contents": {
      "get": {
        "summary": "Get the contents of a folder",
        "description": "Get the contents of a folder.\n",
        "tags": [
          "Folders",
          "Folder Contents",
          "Versioning"
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/folder_id"
          },
          {
            "$ref": "#/parameters/resource_types"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/publication_status"
          },
          {
            "$ref": "#/parameters/sort"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        }
      }
    },
    "/folders/{folder_id}/contents-extract": {
      "get": {
        "summary": "Get the content extracts of a folder",
        "description": "Get the content extracts of a folder. Only the enumerated fields will be returned. Multilevel field paths are not supported. It is intended to return smaller payload if a lot of artifacts are expected to be returned.\n",
        "tags": [
          "Folders",
          "Folder Contents",
          "Versioning"
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/folder_id"
          },
          {
            "$ref": "#/parameters/resource_types"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/publication_status"
          },
          {
            "$ref": "#/parameters/sort"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/field_names"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        }
      }
    },
    "/template-fields/{template_field_id}": {
      "get": {
        "summary": "Get a template field",
        "description": "Get a template field.\n",
        "tags": [
          "Template Fields"
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/template_field_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok_template_field"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        }
      },
      "put": {
        "summary": "Update a template field",
        "description": "Update a template field.\n",
        "tags": [
          "Template Fields"
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "name": "template_field",
            "in": "body",
            "description": "The template field to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TemplateField"
            }
          },
          {
            "$ref": "#/parameters/template_field_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok_template_field"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        }
      },
      "delete": {
        "summary": "Delete a template field",
        "description": "Delete a template field.\n",
        "tags": [
          "Template Fields"
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/template_field_id"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/no_content"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        }
      }
    },
    "/template-fields": {
      "post": {
        "summary": "Create a template field",
        "description": "Create a template field.\n",
        "tags": [
          "Template Fields"
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "name": "template_field",
            "in": "body",
            "description": "The template field to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TemplateField"
            }
          },
          {
            "$ref": "#/parameters/qs_folder_id"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/created_template_field"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        }
      }
    },
    "/template-fields/{template_field_id}/permissions": {
      "get": {
        "summary": "Get permissions of a template field",
        "description": "Get permissions of a template field.\n",
        "tags": [
          "Template Fields",
          "Permissions"
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/template_field_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        }
      },
      "put": {
        "summary": "Update permissions of a template field",
        "description": "Update permissions of a template field.\n",
        "tags": [
          "Template Fields",
          "Permissions"
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/template_field_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        }
      }
    },
    "/template-fields/{template_field_id}/details": {
      "get": {
        "summary": "Get details of a template field",
        "description": "Get details of a template field.\n",
        "tags": [
          "Template Fields",
          "Resource Details"
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/template_field_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        }
      }
    },
    "/template-fields/{template_field_id}/report": {
      "get": {
        "summary": "Get report of a template field",
        "description": "Get report of a template field.\n",
        "tags": [
          "Template Fields",
          "Resource Report",
          "Versioning"
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/template_field_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        }
      }
    },
    "/template-fields/{template_field_id}/versions": {
      "get": {
        "summary": "Get a list of versions of a template field",
        "description": "Get a list of versions of a template field.\n",
        "tags": [
          "Template Fields",
          "Resource Report",
          "Versioning"
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/template_field_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        }
      }
    },
    "/template-elements/{template_element_id}": {
      "get": {
        "summary": "Get a template element",
        "description": "Get a template element.\n",
        "tags": [
          "Template Elements"
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/template_element_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok_template_element"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        }
      },
      "put": {
        "summary": "Update a template element",
        "description": "Update a template element.\n",
        "tags": [
          "Template Elements"
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "name": "template_element",
            "in": "body",
            "description": "The template element to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TemplateElement"
            }
          },
          {
            "$ref": "#/parameters/template_element_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok_template_element"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        }
      },
      "delete": {
        "summary": "Delete a template element",
        "description": "Delete a template element.\n",
        "tags": [
          "Template Elements"
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/template_element_id"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/no_content"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        }
      }
    },
    "/template-elements": {
      "post": {
        "summary": "Create a template element",
        "description": "Create a template element.\n",
        "tags": [
          "Template Elements"
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "name": "template_element",
            "in": "body",
            "description": "The template element to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TemplateElement"
            }
          },
          {
            "$ref": "#/parameters/qs_folder_id"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/created_template_element"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        }
      }
    },
    "/template-elements/{template_element_id}/permissions": {
      "get": {
        "summary": "Get permissions of a template element",
        "description": "Get permissions of a template element.\n",
        "tags": [
          "Template Elements",
          "Permissions"
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/template_element_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        }
      },
      "put": {
        "summary": "Update permissions of a template element",
        "description": "Update permissions of a template element.\n",
        "tags": [
          "Template Elements",
          "Permissions"
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/template_element_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        }
      }
    },
    "/template-elements/{template_element_id}/details": {
      "get": {
        "summary": "Get details of a template element",
        "description": "Get details of a template element.\n",
        "tags": [
          "Template Elements",
          "Resource Details"
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/template_element_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        }
      }
    },
    "/template-elements/{template_element_id}/report": {
      "get": {
        "summary": "Get report of a template element",
        "description": "Get report of a template element.\n",
        "tags": [
          "Template Elements",
          "Resource Report",
          "Versioning"
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/template_element_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        }
      }
    },
    "/template-elements/{template_element_id}/versions": {
      "get": {
        "summary": "Get a list of versions of a template element",
        "description": "Get a list of versions of a template element.\n",
        "tags": [
          "Template Elements",
          "Resource Report",
          "Versioning"
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/template_element_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        }
      }
    },
    "/template-instances/{template_instance_id}": {
      "get": {
        "summary": "Get a template instance",
        "description": "Get a template instance.\n",
        "tags": [
          "Template Instances"
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/template_instance_id"
          },
          {
            "$ref": "#/parameters/format"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok_template_instance"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        }
      },
      "put": {
        "summary": "Update a template instance",
        "description": "Update a template instance.\n",
        "tags": [
          "Template Instances"
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "name": "template_instance",
            "in": "body",
            "description": "The template instance to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TemplateInstance"
            }
          },
          {
            "$ref": "#/parameters/template_instance_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok_template_instance"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        }
      },
      "delete": {
        "summary": "Delete a template instance",
        "description": "Delete a template instance.\n",
        "tags": [
          "Template Instances"
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/template_instance_id"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/no_content"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        }
      }
    },
    "/template-instances": {
      "post": {
        "summary": "Create a template instance",
        "description": "Create a template instance.\n",
        "tags": [
          "Template Instances"
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "name": "template_instance",
            "in": "body",
            "description": "The template instance to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TemplateInstance"
            }
          },
          {
            "$ref": "#/parameters/qs_folder_id"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/created_template_instance"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        }
      }
    },
    "/template-instances/{template_instance_id}/permissions": {
      "get": {
        "summary": "Get permissions of a template instance",
        "description": "Get permissions of a template instance.\n",
        "tags": [
          "Template Instances",
          "Permissions"
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/template_instance_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        }
      },
      "put": {
        "summary": "Update permissions of a template instance",
        "description": "Update permissions of a template instance.\n",
        "tags": [
          "Template Instances",
          "Permissions"
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/template_instance_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        }
      }
    },
    "/template-instances/{template_instance_id}/details": {
      "get": {
        "summary": "Get details of a template instance",
        "description": "Get details of a template instance.\n",
        "tags": [
          "Template Instances",
          "Resource Details"
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/template_instance_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        }
      }
    },
    "/template-instances/{template_instance_id}/report": {
      "get": {
        "summary": "Get report of a template instance",
        "description": "Get report of a template instance.\n",
        "tags": [
          "Template Instances",
          "Resource Report"
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/template_instance_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        }
      }
    },
    "/templates/{template_id}": {
      "get": {
        "summary": "Get a template",
        "description": "Get a template.\n",
        "tags": [
          "Templates"
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/template_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok_template"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        }
      },
      "put": {
        "summary": "Update a template",
        "description": "Update a template.\n",
        "tags": [
          "Templates"
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "name": "template",
            "in": "body",
            "description": "The template to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Template"
            }
          },
          {
            "$ref": "#/parameters/template_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok_template"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        }
      },
      "delete": {
        "summary": "Delete a template",
        "description": "Delete a template.\n",
        "tags": [
          "Templates"
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/template_id"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/no_content"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        }
      }
    },
    "/templates": {
      "post": {
        "summary": "Create a template",
        "description": "Create a template.\n",
        "tags": [
          "Templates"
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "name": "template",
            "in": "body",
            "description": "The template to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Template"
            }
          },
          {
            "$ref": "#/parameters/qs_folder_id"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/created_template"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        }
      }
    },
    "/templates/{template_id}/permissions": {
      "get": {
        "summary": "Get permissions of a template",
        "description": "Get permissions of a template.\n",
        "tags": [
          "Templates",
          "Permissions"
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/template_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        }
      },
      "put": {
        "summary": "Update permissions of a template",
        "description": "Update permissions of a template.\n",
        "tags": [
          "Templates",
          "Permissions"
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/template_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        }
      }
    },
    "/templates/{template_id}/details": {
      "get": {
        "summary": "Get details of a template",
        "description": "Get details of a template.\n",
        "tags": [
          "Templates",
          "Resource Details"
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/template_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        }
      }
    },
    "/templates/{template_id}/report": {
      "get": {
        "summary": "Get report of a template",
        "description": "Get report of a template.\n",
        "tags": [
          "Templates",
          "Resource Report",
          "Versioning"
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/template_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        }
      }
    },
    "/templates/{template_id}/versions": {
      "get": {
        "summary": "Get a list of versions of a template",
        "description": "Get a list of versions of a template.\n",
        "tags": [
          "Templates",
          "Resource Report",
          "Versioning"
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/template_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        }
      }
    },
    "/search": {
      "get": {
        "summary": "Search resources",
        "description": "Search resources using different criteria. All of the parameters are optional, but you need to provide at least one search criteria. The parameters can be combined, but not all of the combinations will work. You can see the type of the executed search in the response body.\n",
        "tags": [
          "Search",
          "Template Fields",
          "Template Elements",
          "Templates",
          "Template Instances",
          "Folders",
          "Folder Contents",
          "Shared With Me",
          "Versioning"
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/q"
          },
          {
            "$ref": "#/parameters/id"
          },
          {
            "$ref": "#/parameters/resource_types"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/publication_status"
          },
          {
            "$ref": "#/parameters/is_based_on"
          },
          {
            "$ref": "#/parameters/sort"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/sharing"
          },
          {
            "$ref": "#/parameters/mode"
          },
          {
            "$ref": "#/parameters/category_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        }
      }
    },
    "/search-deep": {
      "get": {
        "summary": "Search resources",
        "description": "Search resources using different criteria.\nThis call can go further than 10.000 resources. It is not intended for everyday use.\nAll of the parameters are optional, but you need to provide at least one search criteria. The parameters can be combined, but not all of the combinations will work. You can see the type of the executed search in the response body.\n",
        "tags": [
          "Search",
          "Template Fields",
          "Template Elements",
          "Templates",
          "Template Instances",
          "Folders",
          "Folder Contents",
          "Shared With Me",
          "Versioning"
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/q"
          },
          {
            "$ref": "#/parameters/id"
          },
          {
            "$ref": "#/parameters/resource_types"
          },
          {
            "$ref": "#/parameters/version"
          },
          {
            "$ref": "#/parameters/publication_status"
          },
          {
            "$ref": "#/parameters/is_based_on"
          },
          {
            "$ref": "#/parameters/sort"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/sharing"
          },
          {
            "$ref": "#/parameters/mode"
          },
          {
            "$ref": "#/parameters/category_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        }
      }
    },
    "/command/validate": {
      "post": {
        "summary": "Validate resources",
        "description": "Validate CEDAR resources (i.e., templates, elements and instances) against the CEDAR meta-model.\n&nbsp;\nTo use this service you will need to append the resource text in the request body as the payload. However, in the case of validating the template instance, you have an additional option to include the template text by organizing them as follows:\n```\n{\n  \"schema\": <template text>,\n  \"instance\": <instance text>\n}\n```\n&nbsp;\nThe validation service will return a report in JSON format as follows:\n```\n{\n  \"validates\": \"\",  # Indicate the validity of the submitted resource (true = valid, false = invalid).\n  \"warnings\": [],   # A list of warning messages, if any.\n  \"errors\": []      # A list of error messages, if any.\n}\n```\n",
        "tags": [
          "Validation"
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/resource_type"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_error"
          }
        }
      }
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "properties": {
        "@id": {
          "type": "string",
          "description": "Unique URL identifier representing a specific user."
        },
        "firstName": {
          "type": "string",
          "description": "First name."
        },
        "lastName": {
          "type": "string",
          "description": "Last name."
        },
        "email": {
          "type": "string",
          "description": "Email."
        },
        "pav:createdOn": {
          "type": "string",
          "description": "Creation time in xsd:dateTime format."
        },
        "createdOnTS": {
          "type": "number",
          "description": "Creation time as Unix timestamp."
        },
        "pav:lastUpdatedOn": {
          "type": "string",
          "description": "Last update time in xsd:dateTime format."
        },
        "lastUpdatedOnTS": {
          "type": "string",
          "description": "Last update time as Unix timestamp."
        },
        "sourceHash": {
          "type": "string",
          "description": "Reserved for further use. Currently null."
        },
        "schema:identifier": {
          "type": "string",
          "description": "Reserved for further use. Currently null."
        },
        "schema:name": {
          "type": "string",
          "description": "Display name."
        },
        "schema:description": {
          "type": "string",
          "description": "Reserved for further use. Currently null."
        },
        "resourceType": {
          "type": "string",
          "description": "The value \"user\""
        }
      }
    },
    "Folder": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique URL identifier representing a specific folder."
        }
      }
    },
    "TemplateField": {
      "type": "object",
      "properties": {
        "@id": {
          "type": "string",
          "description": "Unique URL identifier representing a specific template field."
        }
      }
    },
    "TemplateElement": {
      "type": "object",
      "properties": {
        "@id": {
          "type": "string",
          "description": "Unique URL identifier representing a specific template element."
        }
      }
    },
    "TemplateInstance": {
      "type": "object",
      "properties": {
        "@id": {
          "type": "string",
          "description": "Unique URL identifier representing a specific template instance."
        }
      }
    },
    "Template": {
      "type": "object",
      "properties": {
        "@id": {
          "type": "string",
          "description": "Unique URL identifier representing a specific template."
        }
      }
    }
  }
}