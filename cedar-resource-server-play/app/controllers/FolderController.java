package controllers;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.commons.lang3.StringUtils;
import org.metadatacenter.constant.HttpConstants;
import org.metadatacenter.server.IResourceService;
import org.metadatacenter.server.model.CedarResource;
import org.metadatacenter.server.model.CedarResourceType;
import org.metadatacenter.server.model.ProvenanceTime;
import org.metadatacenter.server.model.ProvenanceUser;
import org.metadatacenter.server.model.response.ResourceListRequest;
import org.metadatacenter.server.model.response.ResourceListResponse;
import org.metadatacenter.server.security.Authorization;
import org.metadatacenter.server.security.CedarAuthFromRequestFactory;
import org.metadatacenter.server.security.model.IAuthRequest;
import org.metadatacenter.server.security.model.auth.CedarPermission;
import org.metadatacenter.server.security.model.auth.IAccountInfo;
import org.metadatacenter.util.json.JsonUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import play.libs.F;
import play.mvc.Result;

import java.rmi.AccessException;
import java.util.*;
import java.util.concurrent.ThreadLocalRandom;
import java.util.stream.Collectors;

public class FolderController extends AbstractResourceServerController {
  private static Logger log = LoggerFactory.getLogger(FolderController.class);

  private static IResourceService resourceService;

  final static List<String> knownSortKeys;

  static {
    knownSortKeys = new ArrayList<>();
    knownSortKeys.add("name");
    knownSortKeys.add("createdOn");
    knownSortKeys.add("lastUpdatedOn");
  }

  public static void injectResourceService(IResourceService rs) {
    resourceService = rs;
  }

  public static Result createResource() {
    try {
      IAuthRequest frontendRequest = CedarAuthFromRequestFactory.fromRequest(request());
      Authorization.mustHavePermission(frontendRequest, CedarPermission.JUST_AUTHORIZED);

      IAccountInfo ai = Authorization.getAccountInfo(frontendRequest);

      CedarResource resource = null;

      CedarResource r = resourceService.createResource(resource);

      ObjectMapper mapper = new ObjectMapper();
      JsonNode createdUser = mapper.valueToTree(r);
      // Remove autogenerated _id field to avoid exposing it
      createdUser = JsonUtils.removeField(createdUser, "_id");
      // Set Location header pointing to the newly created template
      String absoluteUrl = "TODO";//routes.FolderController.findFolder(r.getResourceId()).absoluteURL(request());
      response().setHeader(HttpConstants.HTTP_HEADER_LOCATION, absoluteUrl);
      // Return created response
      return created(createdUser);
    } catch (IllegalArgumentException e) {
      return badRequestWithError(e);
    } catch (AccessException e) {
      return forbiddenWithError(e);
    } catch (Exception e) {
      return internalServerErrorWithError(e);
    }
  }


  public static Result findFolder(F.Option<String> pathParam, F.Option<String> resourceTypes, F.Option<String> sort, F
      .Option<Long> limitParam, F.Option<Long> offsetParam) {
    try {

      // Test path
      String path;
      if (pathParam.isEmpty() || pathParam.get().length() == 0) {
        throw new IllegalArgumentException("You need to specify path as a request parameter!");
      }
      path = pathParam.get();
      if (path.endsWith("/") && path.length() > 1) {
        throw new IllegalArgumentException("Do not pass trailing / for paths!");
      }

      // Test resource types
      String resourceTypesString = null;
      if (resourceTypes.isEmpty() || resourceTypes.get().length() == 0) {
        throw new IllegalArgumentException("You need to specify resource_types as a request parameter!");
      } else {
        resourceTypesString = resourceTypes.get();
      }

      List<String> resourceTypeList = Arrays.asList(StringUtils.split(resourceTypesString, ","));
      Set<String> knownResourceTypes = Arrays.asList(CedarResourceType.values()).stream().map(crt -> crt.getValue())
          .collect(Collectors.toSet());

      for (String rt : resourceTypeList) {
        if (!knownResourceTypes.contains(rt)) {
          throw new IllegalArgumentException("You passed an illegal resource type:'" + rt + "'. The allowed values " +
              "are:" + knownResourceTypes);
        }
      }

      // Test limit
      long limit = 50; // set default
      if (limitParam.isDefined()) {
        if (limitParam.get() <= 0) {
          throw new IllegalArgumentException("You should specify a positive limit!");
        } else if (limitParam.get() > 100) {
          throw new IllegalArgumentException("You should specify a limit smaller than 100!");
        }
        limit = limitParam.get();
      }

      // Test offset
      long offset = 0;
      if (offsetParam.isDefined()) {
        if (offsetParam.get() < 0) {
          throw new IllegalArgumentException("You should specify a positive or zero offset!");
        }
        offset = offsetParam.get();
      }

      // Test sort
      String sortString;
      if (sort.isEmpty() || sort.get().length() == 0) {
        sortString = "name";
      } else {
        sortString = sort.get();
      }

      List<String> sortList = Arrays.asList(StringUtils.split(sortString, ","));
      for (String s : sortList) {
        String test = s;
        if (s != null && s.startsWith("-")) {
          test = s.substring(1);
        }
        if (!knownSortKeys.contains(test)) {
          throw new IllegalArgumentException("You passed an illegal sort type:'" + s + "'. The allowed values are:" +
              knownSortKeys);
        }
      }

      ResourceListResponse r = new ResourceListResponse();

      ResourceListRequest req = new ResourceListRequest();
      req.setLimit(limit);
      req.setOffset(offset);
      req.setPath(path);
      req.setResourceTypes(resourceTypeList);
      req.setSort(sortList);

      r.setRequest(req);


      ArrayList<CedarResource> resourceList = new ArrayList<>();

      generateRandomResources(resourceList, req, resourceTypeList);


      r.setTotalCount(resourceList.size());
      r.setCurrentOffset(offset);

      r.setResources(resourceList);


      ObjectMapper mapper = new ObjectMapper();
      JsonNode resp = mapper.valueToTree(r);
      return ok(resp);

    } catch (IllegalArgumentException e) {
      return badRequestWithError(e);
    } catch (Exception e) {
      return internalServerErrorWithError(e);
    }
  }

  private static void generateRandomResources(ArrayList<CedarResource> resourceList, ResourceListRequest req,
                                              List<String> resourceTypeList) {
    while (resourceList.size() < req.getLimit()) {
      int i = ThreadLocalRandom.current().nextInt(0, resourceTypeList.size());
      resourceList.add(generateOneResource(CedarResourceType.forValue(resourceTypeList.get(i)), resourceList.size(),
          req));
    }
  }

  private static CedarResource generateOneResource(CedarResourceType type, int idx, ResourceListRequest req) {
    CedarResource newResource = new CedarResource();

    newResource.setId(UUID.randomUUID().toString());
    newResource.setName("Name " + idx);
    newResource.setDescription("Description " + idx);
    String path = req.getPath();
    if (!path.endsWith("/")) {
      path += "/";
    }
    path += newResource.getName();
    newResource.setPath(path);
    newResource.setResourceType(type);

    ProvenanceTime now = new ProvenanceTime(new Date());
    newResource.setCreatedOn(now);
    newResource.setLastUpdatedOn(now);

    ProvenanceUser u = new ProvenanceUser(UUID.randomUUID().toString(), "User Name " + idx);
    newResource.setCreatedBy(u);
    newResource.setLastUpdatedBy(u);

    return newResource;
  }


}
