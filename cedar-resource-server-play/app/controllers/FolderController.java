package controllers;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.metadatacenter.constant.HttpConstants;
import org.metadatacenter.server.IResourceService;
import org.metadatacenter.server.model.CedarResource;
import org.metadatacenter.server.security.Authorization;
import org.metadatacenter.server.security.CedarAuthFromRequestFactory;
import org.metadatacenter.server.security.exception.CedarUserNotFoundException;
import org.metadatacenter.server.security.model.IAuthRequest;
import org.metadatacenter.server.security.model.auth.CedarPermission;
import org.metadatacenter.server.security.model.auth.IAccountInfo;
import org.metadatacenter.util.json.JsonUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import play.mvc.Result;

import java.rmi.AccessException;

public class FolderController extends AbstractResourceServerController {
  private static Logger log = LoggerFactory.getLogger(FolderController.class);

  private static IResourceService resourceService;

  public static void injectResourceService(IResourceService rs) {
    resourceService = rs;
  }

  public static Result createResource() {
    try {
      IAuthRequest frontendRequest = CedarAuthFromRequestFactory.fromRequest(request());
      Authorization.mustHavePermission(frontendRequest, CedarPermission.JUST_AUTHORIZED);

      IAccountInfo ai = Authorization.getAccountInfo(frontendRequest);

      CedarResource resource = null;

      CedarResource r = resourceService.createResource(resource);

      ObjectMapper mapper = new ObjectMapper();
      JsonNode createdUser = mapper.valueToTree(r);
      // Remove autogenerated _id field to avoid exposing it
      createdUser = JsonUtils.removeField(createdUser, "_id");
      // Set Location header pointing to the newly created template
      String absoluteUrl = routes.FolderController.findFolder(r.getResourceId()).absoluteURL(request());
      response().setHeader(HttpConstants.HTTP_HEADER_LOCATION, absoluteUrl);
      // Return created response
      return created(createdUser);
    } catch (IllegalArgumentException e) {
      return badRequestWithError(e);
    } catch (AccessException e) {
      return forbiddenWithError(e);
    } catch (Exception e) {
      return internalServerErrorWithError(e);
    }
  }


  public static Result findFolder(String id) {
    try {
      Authorization.mustHavePermission(CedarAuthFromRequestFactory.fromRequest(request()), CedarPermission
          .JUST_AUTHORIZED);
      CedarResource r = resourceService.findResource(id);

      if (r != null) {
        ObjectMapper mapper = new ObjectMapper();
        JsonNode resource = mapper.valueToTree(r);
        // Remove autogenerated _id field to avoid exposing it
        resource = JsonUtils.removeField(resource, "_id");
        return ok(resource);
      }
      return notFound();
    } catch (CedarUserNotFoundException e) {
      return notFound();
    } catch (IllegalArgumentException e) {
      return badRequestWithError(e);
    } catch (Exception e) {
      return internalServerErrorWithError(e);
    }
  }

}
